-- EX1
SELECT EPOCA.NOME, TIPO_QUARTO.NOME, PRECOEPOCATIPOQUARTO.PRECO
FROM TIPO_QUARTO
         JOIN PRECO_EPOCA_TIPO_QUARTO PRECOEPOCATIPOQUARTO ON TIPO_QUARTO.ID = PRECOEPOCATIPOQUARTO.ID_TIPO_QUARTO
         JOIN EPOCA ON PRECOEPOCATIPOQUARTO.ID_EPOCA = EPOCA.ID
WHERE PRECOEPOCATIPOQUARTO.PRECO > (SELECT AVG(PRECOEPOCATIPOQUARTO2.PRECO)
                                    FROM PRECO_EPOCA_TIPO_QUARTO PRECOEPOCATIPOQUARTO2
                                    WHERE PRECOEPOCATIPOQUARTO.ID_EPOCA = PRECOEPOCATIPOQUARTO2.ID_EPOCA)
GROUP BY EPOCA.NOME, TIPO_QUARTO.NOME, PRECOEPOCATIPOQUARTO.PRECO
ORDER BY EPOCA.NOME;

-- EX2
CREATE OR REPLACE FUNCTION OBTERNUMREDUCOES(P_IDTIPOQUARTO NUMBER) RETURN NUMBER
AS
    PRECO_EPOCA   SYS_REFCURSOR;
    NUM_REDUCOES  NUMBER;
    AUX_ID        NUMBER;
    AUX_PRECO     NUMBER;
    CURRENT_ID    NUMBER;
    CURRENT_PRECO NUMBER;
BEGIN

    CURRENT_ID := 0;
    SELECT 1 INTO CURRENT_ID FROM DUAL WHERE EXISTS(SELECT ID FROM TIPO_QUARTO WHERE ID = P_IDTIPOQUARTO);

    IF (CURRENT_ID = 0) THEN
        RETURN NULL;
    END IF;

    OPEN PRECO_EPOCA FOR
        SELECT ID_EPOCA, PRECO
        FROM PRECO_EPOCA_TIPO_QUARTO
        WHERE ID_TIPO_QUARTO = 1
        GROUP BY ID_EPOCA, PRECO
        ORDER BY ID_EPOCA;

    CURRENT_ID := 0;
    CURRENT_PRECO := 0;
    NUM_REDUCOES := 0;

    LOOP
        FETCH PRECO_EPOCA INTO AUX_ID, AUX_PRECO;
        EXIT WHEN PRECO_EPOCA%NOTFOUND;

        IF (AUX_PRECO < CURRENT_PRECO) THEN
            NUM_REDUCOES := NUM_REDUCOES + 1;
        END IF;

        CURRENT_ID := AUX_ID;
        CURRENT_PRECO := AUX_PRECO;

    END LOOP;

    RETURN NUM_REDUCOES;

END;

DECLARE
    AUX NUMBER;
BEGIN

    AUX := OBTERNUMREDUCOES(1 || ' REDUCOES');
    DBMS_OUTPUT.PUT_LINE(AUX);

    AUX := OBTERNUMREDUCOES(2 || ' REDUCOES');
    DBMS_OUTPUT.PUT_LINE(AUX);

    AUX := OBTERNUMREDUCOES(3 || ' REDUCOES');
    DBMS_OUTPUT.PUT_LINE(AUX);
END;